services:
    decrypt:
        image: python:3.9-slim
        container_name: decrypt_env
        volumes:
            - vault-pass-volume:/app/vault-pass.env
            - env-volume:/app/.env
        working_dir: /app
        command: bash -c "
            ls -la
            && source vault-pass.env
            && pip install ansible-vault
            && echo $$VAULT_PASSWORD > vault-pass.txt
            && ansible-vault decrypt secrets.env --vault-password-file vault-pass.txt --output .env
            && rm -rf vault-pass.txt"
    web:
        build: .
        container_name: web
        depends_on:
            redis:
                condition: service_healthy
            decrypt:
                condition: service_completed_successfully
        volumes:
            - env-volume:/app/.env
        working_dir: /app
        command: bash -c "
            ls -la
            && python src/preprocess.py 
            && python src/train.py 
            && python src/predict.py -m LOG_REG -t func
            && coverage run src/unit_tests/test_preprocess.py
            && coverage run -a src/unit_tests/test_training.py
            && coverage run -a src/unit_tests/test_database.py
            && coverage run -a src/unit_tests/test_app.py
            && coverage report -m
            && (python src/app.py --model LOG_REG &) 
            && sleep 30
            && curl -X GET http://localhost:8000/
            && curl -X POST http://localhost:8000/predict \
                    -H 'Content-Type":" application/json' \
                    --data-binary @tests/test_0.json"
        ports:
            - 8000:8000
        image: zarus03/ml-big-data-lab-3:latest
    redis:
        image: redis:latest
        container_name: redis
        depends_on:
            decrypt:
                condition: service_completed_successfully
        volumes:
            - env-volume:/app/.env
        working_dir: /app
        command: bash -c "
            ls -la
            && source .env
            && redis-server --requirepass $$REDIS_PASSWORD"
        ports:
            - 6379:6379
        healthcheck:
            test: ["CMD", "bash", "-c", "source .env && redis-cli -a $$REDIS_PASSWORD ping"]
            interval: 1s
            timeout: 2s
            retries: 10

volumes:
  vault-pass-volume:
    driver: local
    driver_opts:
      type: none
      device: vault-pass.env
      o: bind
  env-volume:
